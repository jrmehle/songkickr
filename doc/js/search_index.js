var search_data = {"index":{"searchIndex":["apierror","apikeynotset","resourcenotfound","songkickr","artist","artistresult","concertsetlistresult","event","eventresult","location","locationresult","performance","remote","setlist","setlistitem","venue","api_key()","api_key=()","artist_events()","artist_search()","concert_setlists()","event()","events()","get()","gigography()","location_search()","metro_areas_events()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","parse_performance()","parse_results()","parse_results()","parse_results()","parse_results()","parse_setlist_items()","start_hash_to_datetime()","to_s()","to_s()","to_s()","users_events()","users_tracked_artists()","venue()","license","readme"],"longSearchIndex":["apierror","apikeynotset","resourcenotfound","songkickr","songkickr::artist","songkickr::artistresult","songkickr::concertsetlistresult","songkickr::event","songkickr::eventresult","songkickr::location","songkickr::locationresult","songkickr::performance","songkickr::remote","songkickr::setlist","songkickr::setlistitem","songkickr::venue","songkickr::api_key()","songkickr::api_key=()","songkickr::remote#artist_events()","songkickr::remote#artist_search()","songkickr::remote#concert_setlists()","songkickr::remote#event()","songkickr::remote#events()","songkickr::remote#get()","songkickr::remote#gigography()","songkickr::remote#location_search()","songkickr::remote#metro_areas_events()","apierror::new()","songkickr::artist::new()","songkickr::artistresult::new()","songkickr::concertsetlistresult::new()","songkickr::event::new()","songkickr::eventresult::new()","songkickr::location::new()","songkickr::locationresult::new()","songkickr::performance::new()","songkickr::remote::new()","songkickr::setlist::new()","songkickr::setlistitem::new()","songkickr::venue::new()","songkickr::event#parse_performance()","songkickr::artistresult#parse_results()","songkickr::concertsetlistresult#parse_results()","songkickr::eventresult#parse_results()","songkickr::locationresult#parse_results()","songkickr::setlist#parse_setlist_items()","songkickr::event#start_hash_to_datetime()","apierror#to_s()","apikeynotset#to_s()","resourcenotfound#to_s()","songkickr::remote#users_events()","songkickr::remote#users_tracked_artists()","songkickr::remote#venue()","",""],"info":[["APIError","","APIError.html","",""],["APIKeyNotSet","","APIKeyNotSet.html","",""],["ResourceNotFound","","ResourceNotFound.html","",""],["Songkickr","","Songkickr.html","",""],["Songkickr::Artist","","Songkickr/Artist.html","","<p>A single artist\n\n<pre>{\n &quot;uri&quot;:&quot;http://www.songkick.com/artists/253846-radiohead&quot;,\n &quot;displayName&quot;:&quot;Radiohead&quot;, ...</pre>\n"],["Songkickr::ArtistResult","","Songkickr/ArtistResult.html","","<p>A class to represent the result hash of an Artist search.\n"],["Songkickr::ConcertSetlistResult","","Songkickr/ConcertSetlistResult.html","","<p>A class to represent the result hash of an Setlist search.\n<p>www.songkick.com/developer/setlists\n"],["Songkickr::Event","","Songkickr/Event.html","","<p>A single event\n\n<pre>{\n  &quot;displayName&quot;: &quot;Vampire Weekend at O2 Academy Brixton (February 16, 2010)&quot;,\n  &quot;type&quot;: ...</pre>\n"],["Songkickr::EventResult","","Songkickr/EventResult.html","","<p>A class to represent the result hash of an Event search.\n"],["Songkickr::Location","","Songkickr/Location.html","","<p>A class to represent the hash of a Location.\n\n<pre>{\n  &quot;city&quot;:{\n    &quot;displayName&quot;:&quot;London&quot;,\n    &quot;country&quot;:{ ...</pre>\n"],["Songkickr::LocationResult","","Songkickr/LocationResult.html","","<p>TODO: very similar to concert_setlist_result, event_result, and\nartist_result, extract common stuff to …\n"],["Songkickr::Performance","","Songkickr/Performance.html","","<p>A single performance by an artist.\n\n<pre>{\n  &quot;artist&quot;: {\n    &quot;uri&quot;: &quot;http://www.songkick.com/artists/288696-vampire-weekend&quot;, ...</pre>\n"],["Songkickr::Remote","","Songkickr/Remote.html","","<p>Create an instance of the remote class to interact with the Songkick API.\n"],["Songkickr::Setlist","","Songkickr/Setlist.html","","<p>A single set list by an artist.\n<p>{\n\n<pre>&quot;displayName&quot;: &quot;N.E.R.D. at Glastonbury Festival 2009&quot;,\n&quot;artist&quot;: {\n ...</pre>\n"],["Songkickr::SetlistItem","","Songkickr/SetlistItem.html","","<p>A single set list item.\n\n<pre>{\n  encore: 0\n  name: &quot;Anti Matter &quot;\n}</pre>\n"],["Songkickr::Venue","","Songkickr/Venue.html","",""],["api_key","Songkickr","Songkickr.html#method-c-api_key","()","<p>Returns the Songkick API key In order to use the Songkick API, you must\nhave a Songkick API (their rule, …\n"],["api_key=","Songkickr","Songkickr.html#method-c-api_key-3D","(api_key)","<p>Set the API key. In the event you need to set the API key after\ninitializing the the remote.\n<p>Parameters …\n"],["artist_events","Songkickr::Remote","Songkickr/Remote.html#method-i-artist_events","(artist_id, query = {})","<p>Artist calendar (Upcoming)\n<p>Returns an array of Events.\n<p>www.songkick.com/developer/upcoming-events-for-artist …\n"],["artist_search","Songkickr::Remote","Songkickr/Remote.html#method-i-artist_search","(query={})","<p>Artist Search API\n<p>Returns Artist objects.\n<p>www.songkick.com/developer/artist-search\n"],["concert_setlists","Songkickr::Remote","Songkickr/Remote.html#method-i-concert_setlists","(event_id)","<p>Concert Setlists API\n<p>www.songkick.com/developer/setlists\n<p>Parameters\n"],["event","Songkickr::Remote","Songkickr/Remote.html#method-i-event","(event_id)","<p>Event API\n<p>www.songkick.com/developer/upcoming-events\n<p>Getting detailed information of a single event.\n"],["events","Songkickr::Remote","Songkickr/Remote.html#method-i-events","(query = {})","<p>Event Search API\n<p>www.songkick.com/developer/event-search\n<p>Parameters\n"],["get","Songkickr::Remote","Songkickr/Remote.html#method-i-get","(location, query_params = {})",""],["gigography","Songkickr::Remote","Songkickr/Remote.html#method-i-gigography","(artist_id, query= {})","<p>Gigography API\n<p>groups.google.com/group/songkick-api/browse_thread/thread/af15b9a6ad3c3513#\n<p>Parameters\n"],["location_search","Songkickr::Remote","Songkickr/Remote.html#method-i-location_search","(query = {})","<p>Location Search API\n<p>www.songkick.com/developer/location-search\n<p>Parameters\n"],["metro_areas_events","Songkickr::Remote","Songkickr/Remote.html#method-i-metro_areas_events","(metro_area_id, query = {})","<p>Metro Area Events (Upcoming)\n<p>Returns an array of Events.\n<p>www.songkick.com/developer/upcoming-events-for-metro-area …\n"],["new","APIError","APIError.html#method-c-new","(message = \"API Error\")",""],["new","Songkickr::Artist","Songkickr/Artist.html#method-c-new","(artist_hash = {})","<p>Accepts a hash of artist attributes.\n"],["new","Songkickr::ArtistResult","Songkickr/ArtistResult.html#method-c-new","(result_hash = {})","<p>Takes the result hash directly and parses out the page and total entries\nand finally passes off to the …\n"],["new","Songkickr::ConcertSetlistResult","Songkickr/ConcertSetlistResult.html#method-c-new","(result_hash = {})","<p>Takes the result ash and passes it to parse_results\n"],["new","Songkickr::Event","Songkickr/Event.html#method-c-new","(event_hash)",""],["new","Songkickr::EventResult","Songkickr/EventResult.html#method-c-new","(result_hash = {})","<p>Takes the result hash directly and parses out the page and total entries\nand finally passes off to the …\n"],["new","Songkickr::Location","Songkickr/Location.html#method-c-new","(location_hash)","<p>Takes a location hash. Handles the different city hashes from Event and\nLocation\n"],["new","Songkickr::LocationResult","Songkickr/LocationResult.html#method-c-new","(result_hash = {})","<p>Takes the result hash directly and parses out the page and total entries\nand finally passes off to the …\n"],["new","Songkickr::Performance","Songkickr/Performance.html#method-c-new","(performance_hash)","<p>Takes a the hash of the performance. Parses out an Artist object for the\nartist.\n"],["new","Songkickr::Remote","Songkickr/Remote.html#method-c-new","(api_key = nil)","<p>Create a new instance of the remote class to talk to Songkick\n<p>Get an API key for your app from developer.songkick.com/ …\n"],["new","Songkickr::Setlist","Songkickr/Setlist.html#method-c-new","(setlist_hash)","<p>Takes the setlist hash and parses out an Event and Artist and an array of\nSetlistItems.\n"],["new","Songkickr::SetlistItem","Songkickr/SetlistItem.html#method-c-new","(setlist_item_hash)","<p>Takes the set list item hash and parses a boolean out for encore.\n"],["new","Songkickr::Venue","Songkickr/Venue.html#method-c-new","(venue_hash)",""],["parse_performance","Songkickr::Event","Songkickr/Event.html#method-i-parse_performance","(performance_array = nil)","<p>Builds a list of Performance objects.\n"],["parse_results","Songkickr::ArtistResult","Songkickr/ArtistResult.html#method-i-parse_results","(results = {})","<p>Take the results hash directly and parse the artists into Artist objects.\n<p>Returns an array of Artists …\n"],["parse_results","Songkickr::ConcertSetlistResult","Songkickr/ConcertSetlistResult.html#method-i-parse_results","(results = {})","<p>Parses the setlist items into an array of SetlistItems\n"],["parse_results","Songkickr::EventResult","Songkickr/EventResult.html#method-i-parse_results","(results = {})",""],["parse_results","Songkickr::LocationResult","Songkickr/LocationResult.html#method-i-parse_results","(results = {})","<p>Take the results hash directly and parse the locations into Location\nobjects.\n<p>Returns an array of Locations …\n"],["parse_setlist_items","Songkickr::Setlist","Songkickr/Setlist.html#method-i-parse_setlist_items","(setlist_item_array = nil)","<p>Takes the array of setlist items and create SetLists\n"],["start_hash_to_datetime","Songkickr::Event","Songkickr/Event.html#method-i-start_hash_to_datetime","(start_hash)","<p>Takes the start hash and turns in into a DateTime object.\n"],["to_s","APIError","APIError.html#method-i-to_s","()",""],["to_s","APIKeyNotSet","APIKeyNotSet.html#method-i-to_s","()","<p>Warns of missing API key\n"],["to_s","ResourceNotFound","ResourceNotFound.html#method-i-to_s","()",""],["users_events","Songkickr::Remote","Songkickr/Remote.html#method-i-users_events","(username, query = {})","<p>User Events API\n<p>www.songkick.com/developer/upcoming-events-for-user\n<p>Parameters\n"],["users_tracked_artists","Songkickr::Remote","Songkickr/Remote.html#method-i-users_tracked_artists","(username, query = {})","<p>User Tracked Artists\n<p>www.songkick.com/developer/trackings\n<p>Parameters\n"],["venue","Songkickr::Remote","Songkickr/Remote.html#method-i-venue","(venue_id)","<p>Venue Search\n<p>www.songkick.com/developer/venue-details\n<p>Parameters\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2010-2011 Jared Mehle\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_rdoc.html","","<p>songkickr\n<p>A Ruby wrapper around the Songkick API. Visit www.songkick.com/developer\nfor documentation on …\n"]]}}